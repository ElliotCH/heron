heron = function(a,b,c){
demi_perimetre <- (a + b + c) / 2
aire <- sqrt(demi_perimetre * (demi_perimetre - a) * (demi_perimetre - b) * (demi_perimetre - c))
return(aire)
}
heron(3,3,3)
#'
#' @param a la longueur du premier côté
#' @param b la longueur du deuxième côté
#' @param c la longueur du troisième côté
#' @return l'aire du triangle
#' @export
#' @examples
#' heron(3, 3, 3)
#' # Résultat : 3.897114
heron = function(a,b,c){
demi_perimetre <- (a + b + c) / 2
aire <- sqrt(demi_perimetre * (demi_perimetre - a) * (demi_perimetre - b) * (demi_perimetre - c))
return(aire)
}
#'
#' @param a la longueur du premier côté
#' @param b la longueur du deuxième côté
#' @param c la longueur du troisième côté
#' @return l'aire du triangle
#' @export
#' @examples
#' heron(3, 3, 3)
#' # Résultat : 3.897114
heron = function(a,b,c){
demi_perimetre <- (a + b + c) / 2
aire <- sqrt(demi_perimetre * (demi_perimetre - a) * (demi_perimetre - b) * (demi_perimetre - c))
return(aire)
}
#'
#' @param a la longueur du premier côté
#' @param b la longueur du deuxième côté
#' @param c la longueur du troisième côté
#' @return l'aire du triangle
#' @export
#' @examples
#' heron(3, 3, 3)
#' # Résultat : 3.897114
heron = function(a,b,c){
demi_perimetre <- (a + b + c) / 2
aire <- sqrt(demi_perimetre * (demi_perimetre - a) * (demi_perimetre - b) * (demi_perimetre - c))
return(aire)
}
#' @noRd
#' Calcule le demi-périmètre d'un triangle.
#'
#' Cette fonction calcule le demi-périmètre d'un triangle à partir de la longueur de ses trois côtés.
#'
#' @param a la longueur du premier côté
#' @param b la longueur du deuxième côté
#' @param c la longueur du troisième côté
#' @return le demi-périmètre du triangle
demi_perimetre <- function(a, b, c) {
return((a + b + c) / 2)
}
heron(1,1,9)
heron(1,1,1)
# Exemple : Calcul d'un triangle avec les longeurs suivantes :
heron(3,3,3)
#' @param a la longueur du premier côté
#' @param b la longueur du deuxième côté
#' @param c la longueur du troisième côté
#' @return l'aire du triangle
#' @export
#' @examples
#' heron(3, 3, 3)
#' # Résultat : 3.897114
#' heron(1,1,1)
#' # Résultat : 0.4330127
heron = function(a,b,c){
demi_perimetre <- (a + b + c) / 2
aire <- sqrt(demi_perimetre * (demi_perimetre - a) * (demi_perimetre - b) * (demi_perimetre - c))
return(aire)
}
#' @noRd
#' Calcule le demi-périmètre d'un triangle.
#'
#' Cette fonction calcule le demi-périmètre d'un triangle à partir de la longueur de ses trois côtés.
#'
#' @param a la longueur du premier côté
#' @param b la longueur du deuxième côté
#' @param c la longueur du troisième côté
#' @return le demi-périmètre du triangle
demi_perimetre <- function(a, b, c) {
return((a + b + c) / 2)
}
# Deuxième fonction de heron :
heron = function(a,b,c){
if (!is.numeric(a) || !is.numeric(b) || !is.numeric(c)) {
stop("Les arguments doivent être des valeurs numériques.")
}
if (a <= 0 || b <= 0 || c <= 0) {
stop("Les valeurs doivent être positives.")
}
if (a + b <= c || a + c <= b || b + c <= a) {
stop("Les valeurs ne forment pas un triangle valide.")
}
if (a == 0 || b == 0 || c == 0) {
warning("Une ou plusieurs valeurs sont égales à zéro.")
}
demi_perimetre <- (a + b + c) / 2
aire <- sqrt(demi_perimetre * (demi_perimetre - a) * (demi_perimetre - b) * (demi_perimetre - c))
return(aire)
}
heron(-1,2,3)
heron(1,0,3)
usethis::usetest('heron')
usethis::use_r
usethis::use_test('heron')
usethis::use_test('demi_perimetre')
# Test 1 : Triangle équilatéral
assert_equal(demi_perimetre(4, 4, 4), 6)
# Test 2 : Triangle isocèle
assert_equal(demi_perimetre(5, 5, 7), 8.5)
# Test 3 : Triangle quelconque
assert_equal(demi_perimetre(3, 4, 5), 6)
library(assertthat)
# Test 1 : Triangle équilatéral
assert_that(demi_perimetre(4, 4, 4), 6)
library(assertthat)
# Test 1 : Triangle équilatéral
assert_that(demi_perimetre(4, 4, 4), 6)
library(testthat)
# Test 1 : Triangle équilatéral
assert_equal(demi_perimetre(4, 4, 4), 6)
# Test 1 : Triangle équilatéral
except_equal(demi_perimetre(4, 4, 4), 6)
library(testthat)
install.packages('testthat')
install.packages("testthat")
install.packages('testthat')
library(testthat)
# Test 2 : Triangle isocèle
assert_equal(demi_perimetre(5, 5, 7), 8.5)
# Test 3 : Triangle quelconque
assert_equal(demi_perimetre(3, 4, 5), 6)
# Test 1 : Triangle équilatéral
except_equal(demi_perimetre(4, 4, 4), 6)
# Test 1 : Triangle équilatéral
test_that(demi_perimetre(4, 4, 4), 6)
usethis::use_test('heron')
library(testthat)
# Test 1 : Erreur si un argument n'est pas numérique
expect_error(heron("a", 3, 4))
# Test 2 : Erreur si une valeur est négative
expect_error(heron(3, -4, 5))
# Test 3 : Warning si une valeur est égale à 0
expect_warning(heron(0, 4, 5))
# Test 4 : Triangle équilatéral
assert_equal(heron(4, 4, 4), 6.928203)
# Test 5 : Triangle isocèle
assert_equal(heron(5, 5, 7), 12)
# Test 6 : Triangle quelconque
assert_equal(heron(3, 4, 5), 6)
# Test 1 : Triangle équilatéral
testthat::assert_equal(demi_perimetre(4, 4, 4), 6)
# Test 1 : Triangle équilatéral
expect_equal(demi_perimetre(4, 4, 4), 6)
# Test 1 : Triangle équilatéral
expect_equal(demi_perimetre(4, 4, 4), 6)
# Test 2 : Triangle isocèle
expect_equal(demi_perimetre(5, 5, 7), 8.5)
# Test 3 : Triangle quelconque
expect_equal(demi_perimetre(3, 4, 5), 6)
# Test 1 : Erreur si un argument n'est pas numérique
expect_error(heron("a", 3, 4))
# Test 2 : Erreur si une valeur est négative
expect_error(heron(3, -4, 5))
# Test 3 : Warning si une valeur est égale à 0
expect_warning(heron(0, 4, 5))
# Test 4 : Triangle équilatéral
expect_equal(heron(4, 4, 4), 6.928203)
# Test 5 : Triangle isocèle
expect_equal(heron(5, 5, 7), 12)
# Test 6 : Triangle quelconque
expect_equal(heron(3, 4, 5), 6)
# Test 5 : Triangle isocèle
expect_equal(heron(5, 5, 7), 12.5)
# Test 5 : Triangle isocèle
expect_equal(heron(5, 5, 7), 12.497)
# Test 1 : Triangle équilatéral
expect_equal(demi_perimetre(4, 4, 4), 6)
# Test 2 : Triangle isocèle
expect_equal(demi_perimetre(5, 5, 7), 8.5)
# Test 3 : Triangle quelconque
expect_equal(demi_perimetre(3, 4, 5), 6)
